print(SansHub)

print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)print(SansHub)

























































































































































































































































--[77]
















































































































































































































































































































































































































































































































































































local Sound = Instance.new("Sound", workspace);
Sound.SoundId = "rbxassetid://6432593850";
Sound:Play();
local Lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/iopjklbnmsss/iopjklbnmsss/main/newgui", true))();
local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))();
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))();
local Stats = game:GetService("Stats");
local Players = game:GetService("Players");
local RunService = game:GetService("RunService");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local Nurysium_Util = loadstring(game:HttpGet("https://raw.githubusercontent.com/xiaoxiaoyu2233/uid/refs/heads/main/v3"))();
local local_player = Players.LocalPlayer;
local camera = workspace.CurrentCamera;
local nurysium_Data = nil;
local hit_Sound = nil;
local closest_Entity = nil;
local parry_remote = nil;
getgenv().aura_Enabled = false;
getgenv().hit_sound_Enabled = false;
getgenv().hit_effect_Enabled = false;
getgenv().night_mode_Enabled = false;
getgenv().trail_Enabled = false;
getgenv().self_effect_Enabled = false;
local Services = {game:GetService("VirtualUser"),game:GetService("VirtualInputManager")};
function initializate(dataFolder_name)
	local nurysium_Data = Instance.new("Folder", game:GetService("CoreGui"));
	nurysium_Data.Name = dataFolder_name;
	hit_Sound = Instance.new("Sound", nurysium_Data);
	hit_Sound.SoundId = "rbxassetid://7334239757";
	hit_Sound.Volume = 5;
end
local function get_closest_entity(Object)
	task.spawn(function()
		local closest;
		local max_distance = math.huge;
		for index, entity in workspace.Alive:GetChildren() do
			if (entity.Name ~= Players.LocalPlayer.Name) then
				local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude;
				if (distance < max_distance) then
					closest_Entity = entity;
					max_distance = distance;
				end
			end
		end
		return closest_Entity;
	end);
end
function resolve_parry_Remote()
	for _, value in Services do
		local temp_remote = value:FindFirstChildOfClass("RemoteEvent");
		if not temp_remote then
			continue;
		end
		if not temp_remote.Name:find("\n") then
			continue;
		end
		parry_remote = temp_remote;
	end
end
local aura_table = {canParry=true,is_Spamming=false,parry_Range=0,spam_Range=0,hit_Count=0,hit_Time=tick(),ball_Warping=tick(),is_ball_Warping=false};
ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
	if getgenv().hit_sound_Enabled then
		hit_Sound:Play();
	end
	if getgenv().hit_effect_Enabled then
		local hit_effect = game:GetObjects("rbxassetid://17407244385")[1];
		hit_effect.Parent = Nurysium_Util.getBall();
		hit_effect:Emit(3);
		task.delay(5, function()
			hit_effect:Destroy();
		end);
	end
end);
ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function()
	aura_table.hit_Count += 1
	task.delay(0.15, function()
		aura_table.hit_Count -= 1
	end);
end);
workspace:WaitForChild("Balls").ChildRemoved:Connect(function(child)
	aura_table.hit_Count = 0;
	aura_table.is_ball_Warping = false;
	aura_table.is_Spamming = false;
end);
task.defer(function()
	game:GetService("RunService").Heartbeat:Connect(function()
		if not local_player.Character then
			return;
		end
		if getgenv().trail_Enabled then
			local trail = game:GetObjects("rbxassetid://17483658369")[1];
			trail.Name = "nurysium_fx";
			if local_player.Character.PrimaryPart:FindFirstChild("nurysium_fx") then
				return;
			end
			local Attachment0 = Instance.new("Attachment", local_player.Character.PrimaryPart);
			local Attachment1 = Instance.new("Attachment", local_player.Character.PrimaryPart);
			Attachment0.Position = Vector3.new(0, -2.411, 0);
			Attachment1.Position = Vector3.new(0, 2.504, 0);
			trail.Parent = local_player.Character.PrimaryPart;
			trail.Attachment0 = Attachment0;
			trail.Attachment1 = Attachment1;
		elseif local_player.Character.PrimaryPart:FindFirstChild("nurysium_fx") then
			local_player.Character.PrimaryPart['nurysium_fx']:Destroy();
		end
	end);
end);
task.defer(function()
	while task.wait(1) do
		if getgenv().night_mode_Enabled then
			game:GetService("TweenService"):Create(game:GetService("Lighting"), TweenInfo.new(3), {ClockTime=3.9}):Play();
		else
			game:GetService("TweenService"):Create(game:GetService("Lighting"), TweenInfo.new(3), {ClockTime=13.5}):Play();
		end
	end
end);
task.spawn(function()
	RunService.PreRender:Connect(function()
		if not getgenv().aura_Enabled then
			return;
		end
		if closest_Entity then
			if (workspace.Alive:FindFirstChild(closest_Entity.Name) and (workspace.Alive:FindFirstChild(closest_Entity.Name).Humanoid.Health > 0)) then
				if aura_table.is_Spamming then
					if (local_player:DistanceFromCharacter(closest_Entity.HumanoidRootPart.Position) <= aura_table.spam_Range) then
						parry_remote:FireServer(0.5, CFrame.new(camera.CFrame.Position, Vector3.zero), {[closest_Entity.Name]=closest_Entity.HumanoidRootPart.Position}, {closest_Entity.HumanoidRootPart.Position.X,closest_Entity.HumanoidRootPart.Position.Y}, false);
					end
				end
			end
		end
	end);
	RunService.Heartbeat:Connect(function()
		if not getgenv().aura_Enabled then
			return;
		end
		local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10;
		local self = Nurysium_Util.getBall();
		if not self then
			return;
		end
		self:GetAttributeChangedSignal("target"):Once(function()
			aura_table.canParry = true;
		end);
		if ((self:GetAttribute("target") ~= local_player.Name) or not aura_table.canParry) then
			return;
		end
		get_closest_entity(local_player.Character.PrimaryPart);
		local player_Position = local_player.Character.PrimaryPart.Position;
		local ball_Position = self.Position;
		local ball_Velocity = self.AssemblyLinearVelocity;
		if self:FindFirstChild("zoomies") then
			ball_Velocity = self.zoomies.VectorVelocity;
		end
		local ball_Direction = (local_player.Character.PrimaryPart.Position - ball_Position).Unit;
		local ball_Distance = local_player:DistanceFromCharacter(ball_Position);
		local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit);
		local ball_Speed = ball_Velocity.Magnitude;
		local ball_speed_Limited = math.min(ball_Speed / 1000, 0.1);
		local ball_predicted_Distance = (ball_Distance - (ping / 15.5)) - (ball_Speed / 3.5);
		local target_Position = closest_Entity.HumanoidRootPart.Position;
		local target_Distance = local_player:DistanceFromCharacter(target_Position);
		local target_distance_Limited = math.min(target_Distance / 10000, 0.1);
		local target_Direction = (local_player.Character.PrimaryPart.Position - closest_Entity.HumanoidRootPart.Position).Unit;
		local target_Velocity = closest_Entity.HumanoidRootPart.AssemblyLinearVelocity;
		local target_isMoving = target_Velocity.Magnitude > 0;
		local target_Dot = target_isMoving and math.max(target_Direction:Dot(target_Velocity.Unit), 0);
		aura_table.spam_Range = math.max(ping / 10, 15) + (ball_Speed / 7);
		aura_table.parry_Range = math.max(math.max(ping, 4) + (ball_Speed / 3.5), 9.5);
		aura_table.is_Spamming = (aura_table.hit_Count > 1) or (ball_Distance < 13.5);
		if (ball_Dot < -0.2) then
			aura_table.ball_Warping = tick();
		end
		task.spawn(function()
			if (((tick() - aura_table.ball_Warping) >= ((0.15 + target_distance_Limited) - ball_speed_Limited)) or (ball_Distance <= 10)) then
				aura_table.is_ball_Warping = false;
				return;
			end
			aura_table.is_ball_Warping = true;
		end);
		if ((ball_Distance <= aura_table.parry_Range) and not aura_table.is_Spamming and not aura_table.is_ball_Warping) then
			parry_remote:FireServer(0.5, CFrame.new(camera.CFrame.Position, Vector3.new(math.random(0, 100), math.random(0, 1000), math.random(100, 1000))), {[closest_Entity.Name]=target_Position}, {target_Position.X,target_Position.Y}, false);
			aura_table.canParry = false;
			aura_table.hit_Time = tick();
			aura_table.hit_Count += 1
			task.delay(0.15, function()
				aura_table.hit_Count -= 1
			end);
		end
		task.spawn(function()
			repeat
				RunService.Heartbeat:Wait();
			until (tick() - aura_table.hit_Time) >= 1 
			aura_table.canParry = true;
		end);
	end);
end);
initializate("nurysium_temp");
spawn(function()
	while true do
		wait(0.01);
		if getgenv().ASC then
			game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalSwordCrate);
		end
	end
end);
spawn(function()
	while true do
		wait(0.01);
		if getgenv().AEC then
			game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer("PromptPurchaseCrate", workspace.Spawn.Crates.NormalExplosionCrate);
		end
	end
end);
spawn(function()
	local TweenService = game:GetService("TweenService");
	local plr = game.Players.LocalPlayer;
	local Ball = workspace:WaitForChild("Balls");
	local currentTween = nil;
	while true do
		wait(0.001);
		if getgenv().FB then
			local ball = Ball:FindFirstChildOfClass("Part");
			local char = plr.Character;
			if (ball and char) then
				local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, false, 0);
				local distance = (char.PrimaryPart.Position - ball.Position).magnitude;
				if (distance <= 1000) then
					if currentTween then
						currentTween:Pause();
					end
					currentTween = TweenService:Create(char.PrimaryPart, tweenInfo, {CFrame=ball.CFrame});
					currentTween:Play();
				end
			end
		elseif currentTween then
			currentTween:Pause();
			currentTween = nil;
		end
	end
end);
local function getExecutorName()
	local executor = "Unknown";
	if getexecutorname then
		executor = getexecutorname();
	end
	return executor;
end
local executorName = getExecutorName();
if (executorName == "Solara") then
	local Sound = Instance.new("Sound", workspace);
	Sound.SoundId = "rbxassetid://2533608894";
	Sound:Play();
	Notification:Notify({Title="SansHub",Description=("不支持此注入器" .. executorName)}, {OutlineColor=Color3.fromRGB(250, 80, 80),Time=5,Type="image"}, {Image="http://www.roblox.com/asset/?id=139537085184495",ImageColor=Color3.fromRGB(255, 84, 84)});
	local old;
	old = hookmetamethod(game, "__namecall", function(self, ...)
		local method = tostring(getnamecallmethod());
		if (string.lower(method) == "kick") then
			return wait(8999999488);
		end
		return old(self, ...);
	end);
	local AntiKick = coroutine.create(function()
		ReplicatedStorage.Security.RemoteEvent:Destroy();
		ReplicatedStorage.Security[""]:Destroy();
		ReplicatedStorage.Security:Destroy();
		LocalPlayer.PlayerScripts.Client.DeviceChecker:Destroy();
		task.wait();
	end);
	coroutine.resume(AntiKick);
else
	local Sound = Instance.new("Sound", workspace);
	Sound.SoundId = "rbxassetid://2533608894";
	Sound:Play();
	Notification:Notify({Title="SansHub",Description=("你的注入器：" .. executorName)}, {OutlineColor=Color3.fromRGB(250, 80, 80),Time=5,Type="image"}, {Image="http://www.roblox.com/asset/?id=139537085184495",ImageColor=Color3.fromRGB(255, 84, 84)});
	local old;
	old = hookmetamethod(game, "__namecall", function(self, ...)
		local method = tostring(getnamecallmethod());
		if (string.lower(method) == "kick") then
			return wait(8999999488);
		end
		return old(self, ...);
	end);
	local AntiKick = coroutine.create(function()
		ReplicatedStorage.Security.RemoteEvent:Destroy();
		ReplicatedStorage.Security[""]:Destroy();
		ReplicatedStorage.Security:Destroy();
		LocalPlayer.PlayerScripts.Client.DeviceChecker:Destroy();
		task.wait();
	end);
	coroutine.resume(AntiKick);
end
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
local player = game.Players.LocalPlayer;
local playerName = player.DisplayName;
local function getExecutorName()
	local executor = "Unknown";
	if getexecutorname then
		executor = getexecutorname();
	end
	return executor;
end
local executorName = getExecutorName();
local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name;
local gameId = game.PlaceId;
local executorName = (identifyexecutor and identifyexecutor()) or "Unknown Executor";
local Players = game:GetService("Players");
local player = Players.LocalPlayer;
local character = player.Character or player.CharacterAdded:Wait();
local originalSpeed = character.Humanoid.WalkSpeed;
local originalFov = game:GetService("Workspace").Camera.FieldOfView;
local speedEnabled = false;
local fovEnabled = false;
local speedValue = 36;
local fovValue = 80;
local function applySpeed()
	if speedEnabled then
		character.Humanoid.WalkSpeed = speedValue;
	else
		character.Humanoid.WalkSpeed = originalSpeed;
	end
end
local function applyFov()
	if fovEnabled then
		game:GetService("Workspace").Camera.FieldOfView = fovValue;
	else
		game:GetService("Workspace").Camera.FieldOfView = originalFov;
	end
end
local function onCharacterAdded(newCharacter)
	character = newCharacter;
	character:WaitForChild("Humanoid");
	applySpeed();
end
player.CharacterAdded:Connect(onCharacterAdded);
character:WaitForChild("Humanoid").Died:Connect(function()
	applySpeed();
	applyFov();
end);
local Win = Lib:CreateWindow("SansHub");
local Tab, name = Win:CreateTab("功能", function()
	warn(i);
end);
Tab:CreateToggle("自动防", false, function(toggled)
	autoParryAIEnabled = toggled;
	resolve_parry_Remote();
	getgenv().aura_Enabled = toggled;
end);
Tab:CreateToggle("让自动防微加强", false, function(toggled)
	enableUltraFastBlocking(toggled);
end);
Tab:CreateToggle("防球错位", false, function(toggled)
	getgenv().antiCurveEnabled = toggled;
end);
Tab:CreateToggle("神鹰", false, function(toggled)
	getgenv().hit_sound_Enabled = toggled;
end);

getgenv().ViewParryArea = false;
getgenv().ParryRange = 10;
local maxRange = 25;
local Stats = game:GetService("Stats");
local Players = game:GetService("Players");
local RunService = game:GetService("RunService");
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local local_player = Players.LocalPlayer;
local camera = workspace.CurrentCamera;
local Nurysium_Util = loadstring(game:HttpGet("https://raw.githubusercontent.com/cracklua/cracks/m/sources/pitbull/Scripts/Blade%20Ball.lua"))();
local closest_Entity = nil;
local connection;
local function get_closest_entity_in_camera_direction()
	local closest;
	local max_distance = math.huge;
	local camera_direction = camera.CFrame.LookVector;
	for _, entity in workspace.Alive:GetChildren() do
		if (entity.Name ~= Players.LocalPlayer.Name) then
			local direction_to_entity = (entity.HumanoidRootPart.Position - camera.CFrame.Position).Unit;
			local angle = math.acos(camera_direction:Dot(direction_to_entity));
			if (angle < math.rad(30)) then
				local distance = (camera.CFrame.Position - entity.HumanoidRootPart.Position).Magnitude;
				if (distance < max_distance) then
					closest_Entity = entity;
					max_distance = distance;
				end
			end
		end
	end
end
local function ViewParryArea()
	local BallParry = Instance.new("Part", workspace);
	BallParry.Name = "SansHub";
	BallParry.Material = Enum.Material.ForceField;
	BallParry.CastShadow = false;
	BallParry.CanCollide = false;
	BallParry.Anchored = true;
	BallParry.BrickColor = BrickColor.new("Bright red");
	BallParry.Shape = Enum.PartType.Ball;
	local PartFind = workspace:FindFirstChild(BallParry.Name);
	if (PartFind and (PartFind ~= BallParry)) then
		PartFind:Destroy();
	end
	local Players = game:GetService("Players");
	local Player = Players.LocalPlayer;
	local isExpanding = false;
	local Range = getgenv().ParryRange;
	local initialRange = getgenv().ParryRange;
	connection = RunService.Heartbeat:Connect(function()
		if not getgenv().ViewParryArea then
			connection:Disconnect();
			BallParry:Destroy();
			return;
		end
		local plrChar = Player.Character;
		local plrPP = plrChar and plrChar:FindFirstChild("HumanoidRootPart");
		BallParry.BrickColor = BrickColor.new("Bright red");
		if plrPP then
			BallParry.Position = plrPP.Position;
		else
			BallParry.Position = Vector3.new(1000, 1000, 1000);
		end
		local self = Nurysium_Util.getBall();
		if self then
			local ball_Velocity = self.AssemblyLinearVelocity;
			if self:FindFirstChild("zoomies") then
				ball_Velocity = self.zoomies.VectorVelocity;
			end
			local ball_Position = self.Position;
			local ball_Direction = (ball_Position - plrPP.Position).Unit;
			local ball_Speed = ball_Velocity.Magnitude;
			local ball_Dot = ball_Direction:Dot(ball_Velocity.Unit);
			local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10;
			local max_parry_Range = math.max(math.max(ping, 4) + (ball_Speed / 1.5), maxRange);
			if (ball_Dot < 0) then
				if not isExpanding then
					Range = initialRange;
					isExpanding = true;
				end
				Range = math.min(Range + (ball_Speed / 5), max_parry_Range);
			elseif isExpanding then
				Range = getgenv().ParryRange;
				isExpanding = false;
			end
			BallParry.Size = Vector3.new(Range, Range, Range);
		end
	end);
end
local Tab, name = Win:CreateTab("商店", function()
	warn(i);
end);
Tab:CreateToggle("自动买刀皮", false, function(state)
	getgenv().ASC = state;
end);
Tab:CreateToggle("自动买爆炸特效", false, function(state)
	getgenv().AEC = state;
end);
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local UserInputService = game:GetService("UserInputService");
local CoreGui = game:GetService("CoreGui");
local Players = game:GetService("Players");
local LocalPlayer = Players.LocalPlayer;
local hitremote;
for i, v in next, game:GetDescendants() do
	if (v and v.Name:find("\n") and v:IsA("RemoteEvent")) then
		hitremote = v;
		break;
	end
end
local cframes = {CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 40), -Random.new():NextNumber(70, 120)),CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 40), -Random.new():NextNumber(70, 120)),CFrame.new(-Random.new():NextNumber(200, 500), Random.new():NextNumber(0, 80), -Random.new():NextNumber(70, 120)),CFrame.new(-Random.new():NextNumber(200, 600), Random.new():NextNumber(0, 80), -Random.new():NextNumber(70, 120))};
local function getcloseplr()
	local plr;
	local dista = math.huge;
	for i, v in next, Players:GetPlayers() do
		if (v and (v ~= LocalPlayer) and v.Character and v.Character:IsDescendantOf(game:GetService("Workspace"):FindFirstChild("Alive")) and v.Character:FindFirstChildOfClass("Humanoid") and (v.Character:FindFirstChildOfClass("Humanoid").Health > 0) and v.Character.PrimaryPart) then
			local dist = LocalPlayer:DistanceFromCharacter(v.Character.PrimaryPart.Position);
			if (dist < dista) then
				dista = dist;
				plr = v;
			end
		end
	end
	return plr;
end
local function getplrs()
	local plrss = {};
	for i, v in next, Players:GetPlayers() do
		if (v and v.Character and v.Character:IsDescendantOf(game:GetService("Workspace"):FindFirstChild("Alive"))) then
			plrss[v.Name] = v.Character.PrimaryPart.Position + Vector3.new(10, 10, 10);
		end
	end
	return plrss;
end
local gui = Instance.new("ScreenGui");
gui.ResetOnSpawn = false;
gui.Parent = CoreGui;
local frame = Instance.new("Frame");
frame.Position = UDim2.new(0, 40, 0, 20);
frame.Size = UDim2.new(0, 100, 0, 50);
frame.BackgroundColor3 = Color3.new(0, 0, 0);
frame.BorderSizePixel = 0;
frame.Name = "spam";
frame.Parent = gui;
local button = Instance.new("TextButton");
button.Text = "SansHub.SPAM";
button.Size = UDim2.new(1, -4, 1, -7);
button.Position = UDim2.new(0, 3, 0, 5);
button.BackgroundColor3 = Color3.new(0, 0, 0);
button.BackgroundTransparency = 1;
button.BorderColor3 = Color3.new(0, 0, 0);
button.BorderSizePixel = 0;
button.Font = Enum.Font.SourceSans;
button.TextColor3 = Color3.new(1, 1, 1);
button.TextSize = 22;
button.Parent = frame;
local activated = false;
local heartbeatConnection;
local manualspamspeed = 8;
local manspamcons = {};
local enabled = false;
local debounce = false;
frame.BackgroundTransparency = 1;
local function deactivateClashMode()
	if heartbeatConnection then
		heartbeatConnection:Disconnect();
		heartbeatConnection = nil;
	end
	for i, v in next, manspamcons do
		v:Disconnect();
	end
	table.clear(manspamcons);
	enabled = false;
	button.Text = "关闭ing";
	button.TextColor3 = Color3.new(1, 0, 0);
end
local function activateClashMode()
	local function fireHitRemote()
		if debounce then
			return;
		end
		debounce = true;
		delay(0.05, function()
			debounce = false;
		end);
		for i = 1, manualspamspeed do
			if not enabled then
				break;
			end
			local args = {[1]=0.5,[2]=cframes[math.random(1, #cframes)],[3]=((getcloseplr() and {[tostring(getcloseplr().Name)]=getcloseplr().Character.PrimaryPart.Position}) or getplrs()),[4]={[1]=math.random(200, 500),[2]=math.random(100, 200)},[5]=false};
			hitremote:FireServer(unpack(args));
		end
	end
	heartbeatConnection = RunService.Heartbeat:Connect(function()
		if enabled then
			fireHitRemote();
		end
	end);
	table.insert(manspamcons, RunService.PreRender:Connect(function()
		if enabled then
			fireHitRemote();
		end
	end));
	enabled = true;
	button.Text = "开启ing";
	button.TextColor3 = Color3.new(0, 1, 0);
end
local function toggleClashMode()
	activated = not activated;
	if activated then
		activateClashMode();
	else
		deactivateClashMode();
	end
end
button.MouseButton1Click:Connect(toggleClashMode);
local colors = {Color3.new(0, 0, 1),Color3.new(1, 0, 0),Color3.new(0, 1, 0),Color3.new(0, 1, 1),Color3.new(1, 0, 1)};
local currentColorIndex = 1;
local function changeColor()
	button.TextColor3 = colors[currentColorIndex];
	currentColorIndex = (currentColorIndex % #colors) + 1;
	wait(1);
	changeColor();
end
changeColor();
button.MouseButton1Click:Connect(toggleClashMode);
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then
		return;
	end
	if (input.KeyCode == Enum.KeyCode.G) then
		toggleClashMode();
	end
end);
local RunService = game:GetService("RunService");
local function preventCurve(ball)
	local previousPosition = ball.Position;
	RunService.Heartbeat:Connect(function()
		if getgenv().antiCurveEnabled then
			local currentPosition = ball.Position;
			local velocity = ball.Velocity;
			if (((currentPosition - previousPosition).Magnitude > 0.1) and (velocity.Magnitude > 0)) then
				ball.Velocity = (currentPosition - previousPosition).Unit * velocity.Magnitude;
			end
			previousPosition = currentPosition;
		end
	end);
end
local function onBallAdded(ball)
	if (ball:IsA("BasePart") and (ball.Name == "Ball")) then
		preventCurve(ball);
	end
end
workspace:WaitForChild("Balls").ChildAdded:Connect(onBallAdded);
for _, ball in ipairs(workspace:WaitForChild("Balls"):GetChildren()) do
	onBallAdded(ball);
end
local ReplicatedStorage = game:GetService("ReplicatedStorage");
local RunService = game:GetService("RunService");
local Players = game:GetService("Players");
local Stats = game:GetService("Stats");
local local_player = Players.LocalPlayer;
local camera = workspace.CurrentCamera;
local parry_remote = nil;
local Services = {game:GetService("VirtualUser"),game:GetService("VirtualInputManager")};
function resolve_parry_Remote()
	for _, value in pairs(Services) do
		local temp_remote = value:FindFirstChildOfClass("RemoteEvent");
		if not temp_remote then
			continue;
		end
		if not temp_remote.Name:find("\n") then
			continue;
		end
		parry_remote = temp_remote;
	end
end
resolve_parry_Remote();
local aura_table = {canParry=true,parry_Range=0,hit_Time=tick()};
local function get_closest_entity(Object)
	local closest_Entity = nil;
	local max_distance = math.huge;
	for _, entity in ipairs(workspace.Alive:GetChildren()) do
		if (entity.Name ~= Players.LocalPlayer.Name) then
			local distance = (Object.Position - entity.HumanoidRootPart.Position).Magnitude;
			if (distance < max_distance) then
				closest_Entity = entity;
				max_distance = distance;
			end
		end
	end
	return closest_Entity;
end
local function enableUltraFastBlocking(enable)
	if enable then
		RunService.Heartbeat:Connect(function()
			if not aura_table.canParry then
				return;
			end
			local closest_Entity = get_closest_entity(local_player.Character.PrimaryPart);
			if closest_Entity then
				local target_Position = closest_Entity.HumanoidRootPart.Position;
				local ball = workspace:FindFirstChild("Ball");
				if ball then
					local player_Position = local_player.Character.PrimaryPart.Position;
					local ball_Position = ball.Position;
					local ball_Distance = (player_Position - ball_Position).Magnitude;
					local ping = Stats.Network.ServerStatsItem["Data Ping"]:GetValue() / 10;
					aura_table.parry_Range = math.max(math.max(ping, 2), 4.5);
					if (ball_Distance <= aura_table.parry_Range) then
						parry_remote:FireServer(0.5, CFrame.new(camera.CFrame.Position, Vector3.new(math.random(0, 100), math.random(0, 1000), math.random(100, 1000))), {[closest_Entity.Name]=target_Position}, {target_Position.X,target_Position.Y}, false);
						aura_table.canParry = false;
						aura_table.hit_Time = tick();
						task.delay(0.01, function()
							aura_table.canParry = true;
						end);
					end
				end
			end
		end);
	else
		aura_table.canParry = false;
	end
end
local Players = game:GetService("Players");
local UserInputService = game:GetService("UserInputService");
local detectToggle = false;
local detectionCooldowns = {};
local function createNotification(player, deviceType)
end
local localPlayer = Players.LocalPlayer;
local inputCounts = {};
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not detectToggle then
		return;
	end
	if gameProcessed then
		return;
	end
	local inputType = input.UserInputType;
	local keyCode = input.KeyCode;
	if (((inputType == Enum.UserInputType.Keyboard) and (keyCode == Enum.KeyCode.F)) or (inputType == Enum.UserInputType.Touch)) then
		local deviceType = ((inputType == Enum.UserInputType.Keyboard) and "F key") or "screen";
		local now = tick();
		local player = localPlayer;
		local userId = player.UserId;
		if not inputCounts[userId] then
			inputCounts[userId] = {count=0,lastTime=now};
		end
		local inputData = inputCounts[userId];
		inputData.count = inputData.count + 1;
		if ((now - inputData.lastTime) > 1) then
			inputData.count = 1;
			inputData.lastTime = now;
		end
		if (inputData.count >= 100) then
			if (detectionCooldowns[userId] and ((now - detectionCooldowns[userId]) < 22)) then
				return;
			end
			if (player ~= localPlayer) then
				createNotification(player, deviceType);
			end
			detectionCooldowns[userId] = now;
			inputData.count = 0;
		end
	end
end);
local Players = game:GetService("Players");
local HttpService = game:GetService("HttpService");
local MarketplaceService = game:GetService("MarketplaceService");
local executorName = "Unknown Executor";
if getexecutorname then
	executorName = getexecutorname();
end
